# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rlR027kh7en_EbMdbNgmnOh2cj4XSjRu
"""

from flask import Flask, request, jsonify, render_template
from youtube_transcript_api import YouTubeTranscriptApi # type: ignore
from transformers import pipeline, AutoTokenizer, AutoModelForSeq2SeqLM
import torch
import warnings
warnings.filterwarnings("ignore")

checkpoint = "google-t5/t5-base"
tokenizer = AutoTokenizer.from_pretrained(checkpoint)
model = AutoModelForSeq2SeqLM.from_pretrained(checkpoint)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

def get_yt_transcript(url):
    video_id = url.replace("https://www.youtube.com/watch?v=", "")
    transcript = YouTubeTranscriptApi.get_transcript(video_id)
    output = ""
    for x in transcript:
        sentance = x['text']
        output += f'{sentance}\n'
    return output

def get_summary(transcript, chunk_size=512):
    # Split the transcript into manageable chunks
    chunks = []
    for i in range(0, len(transcript), chunk_size):
        chunks.append(transcript[i:i + chunk_size])
    summaries = []
    for chunk in chunks:
        inputs = tokenizer("summarize: " + chunk, return_tensors="pt", max_length=512, truncation=True).to(device)
        outputs = model.generate(**inputs, max_length=150, min_length=30, length_penalty=2.0, num_beams=4, early_stopping=True)
        summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
        summaries.append(summary)
    final_summary = ' '.join(summaries)
    return final_summary

app = Flask(__name__, template_folder='drive/My Drive/templates')
@app.route("/")
def home():
    return render_template('index.html')

@app.route('/', methods=['POST'])
def summarize():
    url = request.form['url']
    try:
        transcript = get_yt_transcript(url)
        summary = get_summary(transcript)
        return summary  # Return plain text summary
    except Exception as e:
        return str(e), 400  # Return error message as plain text with a 400 status code


if __name__ == "__main__":
    app.run()